/**
 * Il terzo requisito di questo sistema prevede: R-TimeOk: the current clock time is within a given interval (e.g. between 7 a.m
 *  and 10 a.m ).
 * 
 * In fase di analisi dei requisiti si è chiesto al committente se il tempo deve essere newtoniano o relativistico. Il committente
 * ha specificato che il tempo deve essere newtoniano e deve essere relativo al robot e non alla console.
 * 
 * Questo requisito rappresenta un altro constraint (un vincolo) del sistema, ovvero lo start non deve essere eseguito se non è soddisfatto
 * il vincolo della temperatura.
 * Per questo requisito la scelta effettuata nel secondo requisito di creare un attore in grado di valutare i constraint e ed 
 * eventualmente eseguire le azioni richieste, risulta una scelta vincente, in quanto per soddisfare questo task è sufficiente 
 * aggiungere una nuova regola nella base di conoscenza della mindRobot
 * 
 * la mindrobot ora deve controllare anche che l'ora corrente del robot sia compresa tra le 7 e le 10 a.m
 */
System robotRoomba
Event constraint   : constraint(CONSTRAINT, VALUE) // CONSTRAINT contiene il tipo di vincolo VALUE contiene il nuovo valore

Dispatch moveRobot : usercmd(CMD)
Dispatch execMoveRobot : usercmd(CMD)

Context ctxRobotAnalysis ip [ host="localhost" port=8032 ]
Context ctxConsoleAnalysis ip [ host="localhost" port=8042 ] -httpserver   

QActor robotexecutoranalysis context ctxRobotAnalysis {
	Plan init normal [
		println("Robot executor ready")
	]
	switchTo waitForCmd           
		 
   	Plan waitForCmd[  ]  
  	transition stopAfter 3600000   	//1h 
 		whenMsg execMoveRobot -> execMove  	  
 	finally repeatPlan 
 	
 	Plan execMove resumeLastPlan [
 		printCurrentMessage;
 		onMsg execMoveRobot : usercmd( consoleGui( startBot ) ) -> {
 			println("Inizio a spazzare")
 		};
 		onMsg execMoveRobot : usercmd( consoleGui( stopBot ) ) -> {
 			println("Termino a spazzare")
 		}
 	] 
}

QActor mindrobotanalysis context ctxRobotAnalysis {
	Rules {
		eval( let, X, X ). // lower equal than implementation using worldTheory.pl in src-more/it/unibo/mindrobot/
		eval( let, X, V ):- eval( lt, X , V ) .
		eval( get, X, X ). // greater equal than implementation using worldTheory.pl in src-more/it/unibo/mindrobot/
		eval( get, X, V ):- eval( gt, X , V ) .
		maxTemperature(25).
		startTime(7).
		endTime(10).
		currentTemperature(12).
		currentTime(8).
		checkTemperature(cold):-
				maxTemperature(MAX), 
				currentTemperature(CURRENT), 
				eval(let, CURRENT, MAX), !.
		checkTemperature(hot):- 
				maxTemperature(MAX), 
				currentTemperature(CURRENT), 
				eval(gt, CURRENT, MAX), !.
		checkTime(X):- 
				startTime(START),
				endTime(END),
				currentTime(CURRENT),
				eval(get, CURRENT, START),
				eval(let, CURRENT, END).
		checkConstraints(X):-
			checkTemperature(cold),
			checkTime(X).
	}
	
	Plan init normal [
		println("Mind robot ready")
	]
	switchTo waitPlan
	
	Plan waitPlan[  ]
	transition stopAfter 3600000   	//1h 
 		whenEvent constraint -> handleEvent,
 		whenMsg moveRobot -> handleMsg
 	finally repeatPlan 
 	
 	Plan handleEvent resumeLastPlan [
 		printCurrentEvent;
 		onEvent constraint : constraint(temp, V) -> ReplaceRule currentTemperature(X) with currentTemperature(V);
 		// dopo che cambio la temperatura se è troppo caldo devo stoppare il robot
 		// TODO valutare se è giusta o no come cosa
 		[ !? checkTemperature(hot)  ] forward robotexecutoranalysis -m execMoveRobot : usercmd( consoleGui( stopBot ) ) 		
 	]
 	
 	Plan handleMsg resumeLastPlan [
 		printCurrentMessage;
 		onMsg moveRobot : usercmd( consoleGui( startBot ) ) ->{
 			[ !? checkConstraints(X)  ] forward robotexecutoranalysis -m execMoveRobot : usercmd( consoleGui( startBot ) )
 			else println("Too hot to work")
		};
 		onMsg moveRobot : usercmd( consoleGui( stopBot ) ) -> {
 			[ !? checkConstraints(X)  ] forward robotexecutoranalysis -m execMoveRobot : usercmd( consoleGui( stopBot ) )
 			else println("Too hot to work")
		}
 	]
}

/*
 * TODO valutare se separare il test usando i due componenti
QActor console context ctxConsoleAnalysis {
	Plan init normal [
		println("Console ready");
		delay 6000;
		forward mindrobot -m moveRobot : usercmd( consoleGui( startBot ) );
		delay 1000;
		forward mindrobot -m moveRobot : usercmd( consoleGui( stopBot ) );
		delay 10000;
		forward mindrobot -m moveRobot : usercmd( consoleGui( startBot ) )
	] 
}
*/

/* Per i test del sistema serve qualcuno che simuli l'ambiente e che emetta gli eventi della temperatura e che mandi 
 * i messaggi di start e stop del robot
 * */
QActor testanalysis context ctxConsoleAnalysis {
	Plan init normal [
		println("Test ready");
		delay 5000;
		emit constraint : constraint(temp, 20);
		delay 1000;
		forward mindrobotanalysis -m moveRobot : usercmd( consoleGui( startBot ) );
		delay 1000;
		forward mindrobotanalysis -m moveRobot : usercmd( consoleGui( stopBot ) );
		delay 2000;
		emit constraint : constraint(temp, 28);
		delay 2000;
		forward mindrobotanalysis -m moveRobot : usercmd( consoleGui( startBot ) )
	]
}