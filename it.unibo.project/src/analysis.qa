/**
 * Il secondo requisito di questo sistema prevede: R-TempOk: the value temperature of the city is not higher than a prefi􏰂xed value
 *  (e.g. 25 degrees Celsius).
 * 
 * Questo requisito rappresenta un constraint (un vincolo) del sistema, ovvero lo start non deve essere eseguito se non è soddisfatto
 * il vincolo della temperatura.
 * Perciò per il nostro sistema richiede delle modifiche a livello di architettura. In quanto risulta più conveniente aggiungere un
 * nuovo attore nel contesto del robot. Cosi da separare la logica dalla mera esecuzione dei comandi; questa scelta ci viene utile
 * anche nel caso in cui in futuro vengano aggiunti dei nuovi vincoli, perchè basterà chiedere al nuovo attore (che chiameremo 
 * mindrobot) di avviare il robot, sarà lui chi si occuperà di verificare il soddisfacimento dei vincoli e poi eventualmente lanciare
 * il comando di start.
 * 
 * L'aggiunta del nuovo attore mindrobot implica una modifica anche per la console, in quanto ora lei non comunica più direttamente 
 * con il robotexecutor ma solamente con la mindrobot.
 * 
 * la mindrobot in quanto deve verificare un vincolo ambientale (la temperatura) dovrà essere in ascolto per eventi emessi 
 * dall'ambiente circostante per poi aggiornare il suo stato o meglio la sua base di conoscenza.
 * 
 * Per realizzare quanto detto sopra è necessario aggiungere un nuovo tipo di messaggio execMoveRobot (con stesso payload di 
 * moveRobot) che verrà usato internamente al contesto del robot per dare i segnali di start e stop tra la mindrobot e il 
 * robotexecutor. 
 * 
 * TODO Valuare se usare già in fase di analisi MQTT per la comunicazione tra ambiente/robot e console/robot
 */
System robotRoomba
Event constraint   : constraint(CONSTRAINT, VALUE) // CONSTRAINT contiene il tipo di vincolo VALUE contiene il nuovo valore

Dispatch moveRobot : usercmd(CMD)
Dispatch execMoveRobot : usercmd(CMD)

Context ctxRobotAnalysis ip [ host="localhost" port=8032 ]
Context ctxConsoleAnalysis ip [ host="localhost" port=8042 ] -httpserver   

QActor robotexecutoranalysis context ctxRobotAnalysis {
	Plan init normal [
		println("Robot executor ready")
	]
	switchTo waitForCmd           
		 
   	Plan waitForCmd[  ]  
  	transition stopAfter 3600000   	//1h 
 		whenMsg execMoveRobot -> execMove  	  
 	finally repeatPlan 
 	
 	Plan execMove resumeLastPlan [
 		printCurrentMessage;
 		onMsg execMoveRobot : usercmd( consoleGui( startBot ) ) -> {
 			println("Inizio a spazzare")
 		};
 		onMsg execMoveRobot : usercmd( consoleGui( stopBot ) ) -> {
 			println("Termino a spazzare")
 		}
 	] 
}

QActor mindrobotanalysis context ctxRobotAnalysis {
	Rules {
		eval( let, X, X ). // lower equal than implementation using worldTheory.pl in src-more/it/unibo/mindrobot/
		eval( let, X, V ):- eval( lt, X , V ) .
		maxTemperature(25).
		currentTemperature(12).
		checkTemperature(cold):-
				maxTemperature(MAX), 
				currentTemperature(CURRENT), 
				eval(let, CURRENT, MAX), !.
		checkTemperature(hot):- 
				maxTemperature(MAX), 
				currentTemperature(CURRENT), 
				eval(gt, CURRENT, MAX), !.
	}
	
	Plan init normal [
		println("Mind robot ready")
	]
	switchTo waitPlan
	
	Plan waitPlan[  ]
	transition stopAfter 3600000   	//1h 
 		whenEvent constraint -> handleEvent,
 		whenMsg moveRobot -> handleMsg
 	finally repeatPlan 
 	
 	Plan handleEvent resumeLastPlan [
 		printCurrentEvent;
 		onEvent constraint : constraint(temp, V) -> ReplaceRule currentTemperature(X) with currentTemperature(V);
 		// dopo che cambio la temperatura se è troppo caldo devo stoppare il robot
 		// TODO valutare se è giusta o no come cosa
 		[ !? checkTemperature(hot)  ] forward robotexecutoranalysis -m execMoveRobot : usercmd( consoleGui( stopBot ) ) 		
 	]
 	
 	Plan handleMsg resumeLastPlan [
 		printCurrentMessage;
 		onMsg moveRobot : usercmd( consoleGui( startBot ) ) ->{
 			[ !? checkTemperature(cold)  ] forward robotexecutoranalysis -m execMoveRobot : usercmd( consoleGui( startBot ) )
 			else println("Too hot to work")
		};
 		onMsg moveRobot : usercmd( consoleGui( stopBot ) ) -> {
 			[ !? checkTemperature(cold)  ] forward robotexecutoranalysis -m execMoveRobot : usercmd( consoleGui( stopBot ) )
 			else println("Too hot to work")
		}
 	]
}

/*
 * TODO valutare se separare il test usando i due componenti
QActor console context ctxConsoleAnalysis {
	Plan init normal [
		println("Console ready");
		delay 6000;
		forward mindrobot -m moveRobot : usercmd( consoleGui( startBot ) );
		delay 1000;
		forward mindrobot -m moveRobot : usercmd( consoleGui( stopBot ) );
		delay 10000;
		forward mindrobot -m moveRobot : usercmd( consoleGui( startBot ) )
	] 
}
*/

/* Per i test del sistema serve qualcuno che simuli l'ambiente e che emetta gli eventi della temperatura e che mandi 
 * i messaggi di start e stop del robot
 * */
QActor testanalysis context ctxConsoleAnalysis {
	Plan init normal [
		println("Test ready");
		delay 5000;
		emit constraint : constraint(temp, 20);
		delay 1000;
		forward mindrobotanalysis -m moveRobot : usercmd( consoleGui( startBot ) );
		delay 1000;
		forward mindrobotanalysis -m moveRobot : usercmd( consoleGui( stopBot ) );
		delay 2000;
		emit constraint : constraint(temp, 28);
		delay 2000;
		forward mindrobotanalysis -m moveRobot : usercmd( consoleGui( startBot ) )
	]
}